---
import GlobalStyles from "@components/GlobalStyles.astro";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";
import ImageWrapper from "@components/misc/ImageWrapper.astro";

import { pathsEqual } from "@utils/url-utils";
import ConfigCarrier from "@components/ConfigCarrier.astro";
import { profileConfig, siteConfig } from "@/config";
import { Favicon } from "../types/config";
import { defaultFavicons } from "../constants/icon";
import {
	LIGHT_MODE,
	DARK_MODE,
	AUTO_MODE,
	DEFAULT_THEME,
} from "../constants/constants";
import { url } from "../utils/url-utils";
import Head from "../components/widget/Head.astro";

interface Props {
	title: string;
	banner: string;
	description?: string;
}

let { title, banner, description } = Astro.props;

const isHomePage = pathsEqual(Astro.url.pathname, "/");

const testPathName = Astro.url.pathname;

const anim = {
	old: {
		name: "fadeIn",
		duration: "4s",
		easing: "linear",
		fillMode: "forwards",
		mixBlendMode: "normal",
	},
	new: {
		name: "fadeOut",
		duration: "4s",
		easing: "linear",
		fillMode: "backwards",
		mixBlendMode: "normal",
	},
};

const myFade = {
	forwards: anim,
	backwards: anim,
};

// defines global css variables
// why doing this in Layout instead of GlobalStyles: https://github.com/withastro/astro/issues/6728#issuecomment-1502203757
const configHue = siteConfig.themeColor.hue;
if (!banner || typeof banner !== "string" || banner.trim() === "") {
	banner = siteConfig.banner.src;
}

let pageTitle;
if (title) {
	pageTitle = `${title} - ${siteConfig.title}`;
} else {
	pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`;
}

const favicons: Favicon[] =
	siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;
---

<!doctype html>
<html
	lang={"en"}
	class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]"
>
	<Head />

	<body class="min-h-screen transition">
		<ConfigCarrier />

		<GlobalStyles>
			<slot />
		</GlobalStyles>
	</body><style is:global>
		:root {
			--page-width: 75rem;
		}
	</style>

	<style is:global>
		@tailwind components;
		@tailwind utilities;
	</style>

	<script>
		import "overlayscrollbars/overlayscrollbars.css";
		import { OverlayScrollbars } from "overlayscrollbars";
		import {
			getHue,
			getTheme,
			setHue,
			setTheme,
		} from "../utils/setting-utils";

		// function setClickOutsideToClose(panel: string, ignores: string[]) {
		// 	document.addEventListener("click", (event) => {
		// 		let panelDom = document.getElementById(panel);
		// 		let tDom = event.target;
		// 		for (let ig of ignores) {
		// 			let ie = document.getElementById(ig);
		// 			if (ie == tDom || ie?.contains(tDom)) {
		// 				return;
		// 			}
		// 		}
		// 		panelDom.classList.add("float-panel-closed");
		// 	});
		// }
		// setClickOutsideToClose("display-setting", [
		// 	"display-setting",
		// 	"display-settings-switch",
		// ]);
		// setClickOutsideToClose("nav-menu-panel", [
		// 	"nav-menu-panel",
		// 	"nav-menu-switch",
		// ]);
		// setClickOutsideToClose("search-panel", [
		// 	"search-panel",
		// 	"search-bar",
		// 	"search-switch",
		// ]);

		function loadTheme() {
			const theme = getTheme();
			setTheme(theme);
		}

		function loadHue() {
			setHue(getHue());
		}

		function initCustomScrollbar() {
			OverlayScrollbars(
				// docs say that a initialization to the body element would affect native functionality like window.scrollTo
				// but just leave it here for now
				{
					target: document.querySelector("body"),
				},
				{
					scrollbars: {
						theme: "scrollbar-base scrollbar-auto py-1",
						autoHide: "move",
						autoHideDelay: 500,
						autoHideSuspend: false,
					},
				},
			);
			document.querySelectorAll("pre").forEach((ele) => {
				OverlayScrollbars(ele, {
					scrollbars: {
						theme: "scrollbar-base scrollbar-dark px-2",
						autoHide: "leave",
						autoHideDelay: 500,
						autoHideSuspend: false,
					},
				});
			});
		}

		function init() {
			loadTheme();
			loadHue();
			initCustomScrollbar();
		}

		/* Load settings when entering the site */
		init();

		/* Load settings before swapping */
		/* astro:after-swap event happened before swap animation */
		document.addEventListener("astro:after-swap", init);

		const setup = () => {
			// Remove the delay for the first time page load
			window.swup.hooks.on("link:click", () => {
				document.documentElement.style.setProperty(
					"--content-delay",
					"0ms",
				);
			});
		};
		if (window.swup.hooks) {
			setup();
		} else {
			document.addEventListener("swup:enable", setup);
		}
	</script>
</html>
