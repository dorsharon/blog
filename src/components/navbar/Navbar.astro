---
import { getCollection } from 'astro:content';
import { Icon } from 'astro-icon/components';
import type { NavBarLink } from '../../types/config';
import { getUrl } from '../../utils/url-utils';
import NavMenu from './NavMenu/NavMenu';
import {
	arrowIcon,
	button,
	card,
	endElementsWrapper,
	homeIcon,
	homeLink,
	linksWrapper,
	navLink,
	searchButtonIcon,
	searchIcon,
	themeIcon,
} from './Navbar.css';
import SearchBar from './SearchBar/SearchBar';
import ThemeSwitch from './ThemeSwitch/ThemeSwitch';

const links: NavBarLink[] = [
	{ name: 'Archive', url: '/archive' },
	{ name: 'About', url: '/about' },
];

const allBlogPosts = await getCollection('posts');
const themeButtonId = 'theme-button';
---
<div class={card}>
	<a href={getUrl("/")} class={button}>
		<div class={homeLink}>
			<Icon name="material-symbols:home-outline-rounded" class={homeIcon} />
			Dor Sharon
		</div>
	</a>

	<div class={linksWrapper}>
		{links.map(({ name, url }) =>
			<a aria-label={name} href={getUrl(url)} class={navLink}>
				{name}
			</a>
		)}
	</div>

	<div class={endElementsWrapper}>
		<SearchBar client:load posts={allBlogPosts}>
			<Icon slot="arrow-icon" name="fa6-solid:chevron-right" class={arrowIcon} />
			<Icon slot="search-input-icon" name="material-symbols:search" class={searchIcon} />
			<Icon slot="search-button-icon" name="material-symbols:search" class={searchButtonIcon} />
		</SearchBar>

		<ThemeSwitch client:load themeButtonId={themeButtonId} >
			<Icon slot="light-theme-icon" name="material-symbols:wb-sunny-outline-rounded" class={themeIcon} />
			<Icon slot="dark-theme-icon" name="material-symbols:dark-mode-outline-rounded" class={themeIcon} />
			<Icon slot="system-theme-icon" name="material-symbols:radio-button-partial-outline" class={themeIcon} />
		</ThemeSwitch>

		<!--<ThemeSwitch2  />-->
		<NavMenu client:load links={links} />
	</div>
</div>

<script is:inline >
	import { darkThemeClass, lightThemeClass } from '../../styles/themes.css';
	import { DARK_THEME, LIGHT_THEME, THEME_STORAGE_KEY } from '../../constants/constants';

	let theme;

	if (typeof localStorage !== 'undefined' && localStorage.getItem(THEME_STORAGE_KEY)) {
		theme = localStorage.getItem(THEME_STORAGE_KEY);
	} else {
		theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? DARK_THEME : LIGHT_THEME;
	}

	console.log({'script',theme})


	const isDarkTheme = theme === DARK_THEME;
	
	if (isDarkTheme) {
		document.documentElement.classList.add(darkThemeClass);
		document.documentElement.classList.remove(lightThemeClass);
	} else {
		document.documentElement.classList.add(lightThemeClass);
		document.documentElement.classList.remove(darkThemeClass);
	}

	console.log({'typeof localStorage':typeof localStorage})

	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDarkThemeApplied = document.documentElement.classList.contains(darkThemeClass);
			localStorage.setItem(THEME_STORAGE_KEY, isDarkThemeApplied ? DARK_THEME : LIGHT_THEME);
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>

<!--<script>-->
<!--	document.getElementById(themeButtonId).addEventListener("click", function () {-->
<!--		switchTheme()-->
<!--	});-->

<!--	document.addEventListener('astro:after-swap', () => {-->
<!--		loadButtonScript();-->
<!--	}, { once: false });-->
<!--</script>-->
