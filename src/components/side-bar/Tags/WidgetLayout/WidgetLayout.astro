---
import { Icon } from "astro-icon/components";
import {
	card,
	collapsedWrapper,
	expandButton,
	expandButtonContent,
	expandButtonWrapper,
	title
} from "./WidgetLayout.css";

interface Props {
	id: string;
	name?: string;
	isCollapsed?: boolean;
	collapsedHeight?: string;
	class?: string;
	style?: string;
}
const props = Astro.props;
const { id, name, isCollapsed, collapsedHeight, style } = Astro.props;
const className = Astro.props.class;
---

<widget-layout
	data-id={id}
	data-is-collapsed={isCollapsed}
	class={`${card} ${className}`}
	style={style}
>
	<div class={title}>
		{name}
	</div>

	<div
		id={id}
		class:list={[
			collapsedWrapper,
			{ collapsed: isCollapsed },
		]}
	>
		<slot />
	</div>
	{
		isCollapsed && (
			<div class={expandButtonWrapper}>
				<button class={expandButton}>
					<div class={expandButtonContent}>
						<Icon name="material-symbols:more-horiz" size={28} />{" "}
						More
					</div>
				</button>
			</div>
		)
	}
</widget-layout>

<style define:vars={{ collapsedHeight }}>
    .collapsed {
        height: var(--collapsedHeight);
    }
</style>

<script>
	import { hidden } from "./WidgetLayout.css";

	class WidgetLayout extends HTMLElement {
		constructor() {
			super();

			if (
				this.dataset.isCollapsed === undefined ||
				this.dataset.isCollapsed === false
			)
				return;

			const id = this.dataset.id;
			const btn = this.querySelector(".expand-btn");
			const wrapper = this.querySelector(`#${id}`);
			btn.addEventListener("click", () => {
				wrapper.classList.remove("collapsed");
				btn.classList.add(hidden);
			});
		}
	}

	customElements.define("widget-layout", WidgetLayout);
</script>
